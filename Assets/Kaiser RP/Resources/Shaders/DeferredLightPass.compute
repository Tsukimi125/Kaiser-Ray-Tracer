// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LightPass

#include "UnityShaderVariables.cginc"
// #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "../ShaderLibrary/Utils/SpaceTransforms.hlsl"
#include "../ShaderLibrary/BRDF/BRDF.hlsl"
#include "../ShaderLibrary/Lighting.hlsl"

Texture2D<float4> _GBuffer0;
Texture2D<float4> _GBuffer1;
Texture2D<float4> _GBuffer2;
Texture2D<float4> _GBuffer3;
RWTexture2D<float4> _Result;

float4 _BufferSize;
float2 _Jitter;

SamplerState sampler_linear_clamp;

[numthreads(8, 8, 1)]
void LightPass(uint3 id:SV_DispatchThreadID)
{
    float2 resolution = _BufferSize.xy;
    float2 invResolution = _BufferSize.zw;
    float2 uv = (float2(id.xy) + _Jitter) * invResolution;
    // #ifndef UNITY_REVERSED_Z
    //     uv.y = 1.0 - uv.y;
    // #endif
    SurfaceData surfaceData;
    surfaceData.albedo = _GBuffer0.SampleLevel(sampler_linear_clamp, uv, 0).rgb;
    surfaceData.normal = _GBuffer1.SampleLevel(sampler_linear_clamp, uv, 0).rgb;

    float3 worldPos = _GBuffer2.SampleLevel(sampler_linear_clamp, uv, 0).rgb;
    float3 rmao = _GBuffer3.SampleLevel(sampler_linear_clamp, uv, 0).rgb;
    surfaceData.roughness = rmao.x;
    surfaceData.metallic = rmao.y;


    float3 viewDir = normalize(_WorldSpaceCameraPos - worldPos);

    const float3x3 tangentToWorld = BuildOrthonormalBasis(surfaceData.normal);
    float3 wo = mul(viewDir, tangentToWorld);
    float3 wi = mul(_DirectionalLightDirection, tangentToWorld);

    LayeredBRDF brdf = LayeredBRDF::Create(surfaceData, max(0.0, wo.z));

    float3 dirRes = brdf.eval(wo, wi) * _DirectionalLightColor.rgb;

    _Result[id.xy] = float4(dirRes, 1.0);
}
