
#include "ReSTIRPass.hlsl"


[shader("raygeneration")]
void ReSTIR_BRDF_Temporal()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x + _RE_ConvergenceStep) * uint(1973) + uint(launchIndex.y + _RE_FrameIndex) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    
    TraceData trace;
    VertexData vertex;
    float3 directRadiance;
    float pDiffuse;
    TracePath(launchIndex, launchDim, rng, trace, vertex, directRadiance, pDiffuse);

    float3 totalRadiance = trace.radiance;

    if (_RE_ResSTIRType == 0)
    {
        _Output[launchIndex] = float4(directRadiance + totalRadiance, 1);
    }
    else
    {
        Reservoir re;
        if (_RE_ResSTIRType != 3)
        {
            re = UnPack(_TReservoir[launchIndex]);
        }
        else
        {
            re = UnPack(_SReservoir[launchIndex]);
        }

        re.Update(trace.firstSampleDir, trace.radiance, re.TargetPDF(trace.radiance), clamp(trace.invPDF, 0.0, 1), RandomFloat01(rng));

        _TReservoir[launchIndex] = re.Pack(_RE_TReservoirSize);
        _Output[launchIndex] = float4(directRadiance + max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
        // _Output[launchIndex] = float4((1 - pDiffuse.xxx), 1.0f);
        _DirectIllumination[launchIndex] = float4(directRadiance, 1.0f);
    }
}
// void ReSTIR_Hierarchy_Temporal()
[shader("raygeneration")]
void ReSTIR_Diffuse_Temporal()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    
    TraceData trace;
    VertexData vertex;
    float3 directRadiance;
    TraceDiffuse(launchIndex, launchDim, rng, trace, vertex, directRadiance);
    trace.radiance = saturate(trace.radiance);
    float3 totalRadiance = trace.radiance;

    if (_RE_ResSTIRType == 0)
    {
        _Output[launchIndex] = float4(directRadiance + totalRadiance, 1);
    }
    else
    {
        Reservoir re;
        if (_RE_ResSTIRType != 3)
        {
            re = UnPack(_TReservoir[launchIndex]);
        }
        else
        {
            re = UnPack(_SReservoir[launchIndex]);
        }

        re.Update(trace.firstSampleDir, trace.radiance, re.TargetPDF(trace.radiance), clamp(trace.invPDF, 0.001f, 1), RandomFloat01(rng));

        _TReservoir[launchIndex] = re.Pack(_RE_TReservoirSize);
        // _Output[launchIndex] = float4(directRadiance + max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
        _Output[launchIndex] = float4(max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
        _DirectIllumination[launchIndex] = float4(directRadiance, 1.0f);
    }
}

[shader("raygeneration")]
void ReSTIR_Specular_Temporal()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    
    TraceData trace;
    VertexData vertex;
    float3 directRadiance;
    TraceSpecular(launchIndex, launchDim, rng, trace, vertex, directRadiance);
    trace.radiance = clamp(trace.radiance, 0.0f, 1.0f);
    Reservoir re = UnPack(_TReservoir[launchIndex]);
    float3 diffGI = saturate(re.radiance * re.wSum / (re.M * re.w));
    float3 currentRadiance = lerp(trace.radiance, _Specular_TReservoir[launchIndex].rgb, 0.95f);
    _Output[launchIndex] = float4(currentRadiance, 1.0f);
    _Specular_TReservoir[launchIndex] = float4(currentRadiance, 1.0f);
    _DirectIllumination[launchIndex] = float4(directRadiance, 1.0f);
    return;

    float3 totalRadiance = trace.radiance;
    if (luminance(totalRadiance) < 0.0001f) return;

    if (_RE_ResSTIRType == 0)
    {
        _Output[launchIndex] = float4(directRadiance + totalRadiance, 1);
    }
    else
    {
        Reservoir re;
        if (_RE_ResSTIRType != 3)
        {
            re = UnPack(_Specular_TReservoir[launchIndex]);
        }
        else
        {
            re = UnPack(_SReservoir[launchIndex]);
        }

        re.Update(trace.firstSampleDir, trace.radiance, re.TargetPDF(trace.radiance), clamp(trace.invPDF, 0.0, 100.0f), RandomFloat01(rng));

        _Specular_TReservoir[launchIndex] = re.Pack(_RE_TReservoirSize);
        
        // _Output[launchIndex] = float4(max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
        _DirectIllumination[launchIndex] = float4(directRadiance, 1.0f);
    }
}

[shader("raygeneration")]
void ReSTIR_Layered_Temporal()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    
    TraceData trace;
    VertexData vertex;
    float3 directRadiance;
    TraceSpecular(launchIndex, launchDim, rng, trace, vertex, directRadiance);

    float3 totalRadiance = trace.radiance;
    if (luminance(totalRadiance) < 0.0001f) return;

    if (_RE_ResSTIRType == 0)
    {
        _Output[launchIndex] = float4(directRadiance + totalRadiance, 1);
    }
    else
    {
        Reservoir re;
        if (_RE_ResSTIRType != 3)
        {
            re = UnPack(_Specular_TReservoir[launchIndex]);
        }
        else
        {
            re = UnPack(_SReservoir[launchIndex]);
        }

        re.Update(trace.firstSampleDir, trace.radiance, re.TargetPDF(trace.radiance), clamp(trace.invPDF, 0.0, 100.0f), RandomFloat01(rng));

        _Specular_TReservoir[launchIndex] = re.Pack(_RE_TReservoirSize);
        // _Output[launchIndex] = float4(max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
        _DirectIllumination[launchIndex] = float4(directRadiance, 1.0f);
    }
}

[shader("raygeneration")]
void ReSTIR_Spatial()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

    float2 jitter = float2(RandomFloat01(rng), RandomFloat01(rng)) - float2(0.5, 0.5);
    // float2 uv = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);
    float2 uv = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);

    float3 albedo = _GBuffer0.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float3 normal = _GBuffer1.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float3 worldPos = _GBuffer2.SampleLevel(sampler_point_clamp, uv, 0).xyz;

    float2 offset = float2(RandomFloat01(rng), RandomFloat01(rng));

    Reservoir re = UnPack(_TReservoir[launchIndex]);
    // _Output[launchIndex] = float4(re.radiance * re.wSum / (re.M * re.w), 1.0f);
    float radi = 1.8;
    int maxSpatialSample = 9;
    float2 neighbourFrameCoord;
    float2 neighbourUV;
    float3 neighbourWorldPos;
    float3 neighbourNormal;
    int sample = 0;
    for (int i = 0; i < maxSpatialSample; i++)
    {
        rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex + uint(i)) * uint(24699)) | uint(1);
        
        float2 s = radi * SampleDiskConcentric(frac(float2(RandomFloat01(rng), RandomFloat01(rng)) + offset));
        Reservoir neighbour = UnPack(_TReservoir[launchIndex + round(s)]);

        neighbourFrameCoord = launchIndex + round(s) + float2(0.5, 0.5);
        neighbourUV = (neighbourFrameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
        neighbourWorldPos = _GBuffer2.SampleLevel(sampler_point_clamp, neighbourUV, 0).xyz;
        neighbourNormal = _GBuffer1.SampleLevel(sampler_point_clamp, neighbourUV, 0).xyz;

        if (distance(neighbourWorldPos, worldPos) > 1.1f) continue;
        if (dot(neighbourNormal, normal) < 0.1f) continue;
        // neighbour.RescaleTo(16);
        // if (dot(neighbour.dir, normal) < 0.1f || luminance(neighbour.radiance) <= 0.001f) continue;
        re.Update(neighbour, RandomFloat01(rng));

        sample++;
    }
    float3 directRadiance = _DirectIllumination[launchIndex].xyz;
    _SReservoir[launchIndex] = re.Pack(_RE_SReservoirSize);
    _Output[launchIndex] = float4(max(re.radiance * re.wSum / (re.M * re.w), 0.0f), 1.0f);
    // _Output[launchIndex] = sample / float(maxSpatialSample);

}

[shader("raygeneration")]
void ReSTIR_Combine()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint rng = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(_RE_ConvergenceStep + _RE_FrameIndex) * uint(24699)) | uint(1);
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

    float2 jitter = float2(RandomFloat01(rng), RandomFloat01(rng)) - float2(0.5, 0.5);
    // float2 uv = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);
    float2 uv = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);

    float3 albedo = _GBuffer0.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float3 normal = _GBuffer1.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float3 worldPos = _GBuffer2.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float3 rmao = _GBuffer3.SampleLevel(sampler_point_clamp, uv, 0).xyz;
    float metallic = saturate(rmao.y);

    float3 viewDir = normalize(_WorldSpaceCameraPos - worldPos);
    float ndotv = saturate(dot(normal, viewDir));

    float pDiffuse = (1.0f - metallic) * luminance(lerp(albedo, 0.0.xxx, metallic));
    float pSpecular = luminance(EvalFresnelSchlick(lerp(0.04.xxx, albedo, metallic), 1.0f.xxx, ndotv));

    float normFactor = 1.0f / (pDiffuse + pSpecular);
    pDiffuse *= normFactor;
    pSpecular *= normFactor;


    float3 directRadiance = _DirectIllumination[launchIndex].xyz;
    Reservoir diffReservoir = UnPack(_TReservoir[launchIndex]);
    Reservoir specReservoir = UnPack(_Specular_TReservoir[launchIndex]);
    float3 diffGI = max(diffReservoir.radiance * diffReservoir.wSum / (diffReservoir.M * diffReservoir.w), 0.0001f);
    float3 specGI = max(specReservoir.radiance * specReservoir.wSum / (specReservoir.M * specReservoir.w), 0.0001f);

    float3 indirectRadiance = specGI;
    // float3 indirectRadiance = diffGI * pDiffuse + specGI * pSpecular;
    _Output[launchIndex] = float4(directRadiance + diffGI, 1.0f); //  + saturate(indirectRadiance)
    // _Output[launchIndex] = float4(specGI, 1.0f); //  + saturate(indirectRadiance)
    // _Output[launchIndex] = float4(saturate(indirectRadiance), 1.0f);

}


[shader("miss")]
void MissShader0_Primary(inout RayPayload payload:SV_RayPayload)
{
    // payload.surfaceData.emission = _RE_EnvTex.SampleLevel(sampler_RE_EnvTex, WorldRayDirection(), 0).rgb;

}

[shader("miss")]
void MissShader1_ShadowRay(inout ShadowRayPayload payload:SV_RayPayload)
{
    payload.isShadowed = false;
}
