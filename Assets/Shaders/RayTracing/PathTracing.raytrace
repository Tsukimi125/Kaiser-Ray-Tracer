#include "UnityShaderVariables.cginc"
#include "includes/RayPayload.hlsl"
#include "includes/Utils.hlsl"
#include "includes/Global.hlsl"

uint g_ConvergenceStep;
uint g_FrameIndex;
float g_Zoom;
float g_AspectRatio;

uint g_SamplePerPixel;

TextureCube<float4> g_EnvTex;
SamplerState sampler_g_EnvTex;

#pragma max_recursion_depth 10

struct ScatterRayData
{
    float3 radiance;
    float3 throughput;
};

struct ShadowRayData
{
    bool visible;
};

struct DirLight
{
    float3 direction;
    float3 intensity;
};


void TraceScatterRay(RayDesc ray, inout PathPayload payload, inout ScatterRayData scatterRayData)
{
    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, K_MISS_SHADER_PT_SCATTER_RAY_INDEX, ray, payload);
    scatterRayData.radiance += payload.emission * scatterRayData.throughput;
    scatterRayData.throughput *= payload.radiance;
}

void TraceShadowRay(RayDesc ray, inout PathPayload payload, inout ShadowRayData shadowRayData)
{
    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, K_MISS_SHADER_PT_SHADOW_RAY_INDEX, ray, payload);
    if (payload.bounceIndexOpaque == -1)
    {
        shadowRayData.visible = true;
    }
}


float3 tracePath(uint2 launchIndex, uint2 launchDim)
{
    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

    float3 result = float3(0, 0, 0);
    for (uint i = 0; i < g_SamplePerPixel; i++)
    {
        // Initial random number generator seed for this pixel. The rngState will change every time we draw a random number.
        uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(g_ConvergenceStep + g_FrameIndex + i) * uint(26699)) | uint(1);
        
        float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);

        float2 ndcCoords = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
        
        ndcCoords = ndcCoords * 2 - float2(1, 1);
        ndcCoords = ndcCoords * g_Zoom;

        // Get a ray in view space.
        float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

        // Rotate the ray from view space to world space.
        float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);
        
        RayDesc ray;
        ray.Origin = _WorldSpaceCameraPos;
        ray.Direction = rayDirection;
        ray.TMin = K_T_MIN;
        ray.TMax = K_T_MAX;

        PathPayload payload;
        payload.radiance = float3(1, 1, 1);
        payload.emission = float3(0, 0, 0);
        payload.rngState = rngState;
        payload.bounceIndexOpaque = 0;
        payload.bounceIndexTransparent = 0;
        payload.bounceRayOrigin = float3(0, 0, 0);
        payload.bounceRayDirection = float3(0, 0, 0);

        // ShadowPayload shadowPayload;

        // Safe net for when shaders have compilation errors and don't increase the bounce index, resulting in an infinite loop.
        
        uint safeNet = 0;
        
        ScatterRayData scatterRayData;
        scatterRayData.radiance = float3(0, 0, 0);
        scatterRayData.throughput = float3(1, 1, 1);

        

        DirLight dirLight;
        dirLight.direction = float3(0.1, 0.5, 0.5);
        dirLight.intensity = 0.1;

        do
        {
            TraceScatterRay(ray, payload, scatterRayData);

            if (payload.bounceIndexOpaque == -1)
                break;

            ShadowRayData shadowRayData;
            shadowRayData.visible = false;

            RayDesc shadowRay;
            shadowRay.Origin = payload.bounceRayOrigin;
            shadowRay.Direction = dirLight.direction;
            shadowRay.TMin = K_T_MIN;
            shadowRay.TMax = K_T_MAX;

            PathPayload shadowPayload;
            shadowPayload.radiance = float3(1, 1, 1);
            shadowPayload.emission = float3(0, 0, 0);
            shadowPayload.rngState = rngState;
            shadowPayload.bounceIndexOpaque = 0;
            shadowPayload.bounceIndexTransparent = 0;
            shadowPayload.bounceRayOrigin = float3(0, 0, 0);
            shadowPayload.bounceRayDirection = float3(0, 0, 0);

            TraceShadowRay(shadowRay, shadowPayload, shadowRayData);

            if (shadowRayData.visible)
            {
                // blinn phong
                float3 N = payload.hitNorm;
                float3 L = dirLight.direction;
                float3 V = normalize(_WorldSpaceCameraPos - payload.hitPos);
                float3 H = normalize(L + V);

                float3 diffuse = payload.radiance * scatterRayData.throughput * dirLight.intensity * max(0, dot(N, L));
                float3 specular = dirLight.intensity * pow(max(0, dot(N, H)), 0.5);

                scatterRayData.radiance += diffuse + specular;


                // scatterRayData.radiance += dirLight.intensity * payload.radiance * scatterRayData.throughput;

            }
            
            float pathStopProbability = 1;

            #define ENABLE_RUSSIAN_ROULETTE 1

            #if ENABLE_RUSSIAN_ROULETTE
                pathStopProbability = max(scatterRayData.throughput.r, max(scatterRayData.throughput.g, scatterRayData.throughput.b));

                // Dark colors have higher chance to terminate the path early.
                if (pathStopProbability < RandomFloat01(payload.rngState))
                    break;
            #endif

            scatterRayData.throughput *= 1 / pathStopProbability;

            // generate next ray
            ray.Origin = payload.bounceRayOrigin;
            ray.Direction = payload.bounceRayDirection;
        }
        while ((payload.bounceIndexOpaque <= g_BounceCountOpaque) && (payload.bounceIndexTransparent <= g_BounceCountTransparent) && (++safeNet < 1000));

        result += scatterRayData.radiance;
    }

    result /= float(g_SamplePerPixel);

    return result;
}


[shader("raygeneration")]
void PathTracingRayGenShader()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    float3 result = tracePath(launchIndex, launchDim);
    
    g_Output[launchIndex] = float4(result, 1);
}

[shader("miss")]
void MissShader0_Primary(inout PathPayload payload : SV_RayPayload)
{
    // payload.emission = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;
    payload.emission = 0;
    payload.bounceIndexOpaque = -1;
}

[shader("miss")]
void MissShader1_Shadow(inout PathPayload payload : SV_RayPayload)
{
    payload.emission = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;
    payload.bounceIndexOpaque = -1;
}
