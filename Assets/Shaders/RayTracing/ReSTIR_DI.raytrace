#include "UnityShaderVariables.cginc"
#include "includes/RayPayload.hlsl"
#include "includes/Utils.hlsl"
#include "includes/Global.hlsl"

uint g_ConvergenceStep;
uint g_FrameIndex;
float g_Zoom;
float g_AspectRatio;

TextureCube<float4> g_EnvTex;
SamplerState sampler_g_EnvTex;

RWTexture2D<float4> g_VPos : register(u2);
RWTexture2D<float4> g_VNorm : register(u3);
RWTexture2D<float4> g_VColor : register(u4);
RWTexture2D<float4> g_SPos : register(u5);
RWTexture2D<float4> g_SNorm : register(u6);
RWTexture2D<float4> g_SColor : register(u7);
RWTexture2D<float4> g_Random : register(u8);

#pragma max_recursion_depth 10

[shader("raygeneration")]
void ReSTIRRayGen_InitialSample()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

    // Initial random number generator seed for this pixel. The rngState will change every time we draw a random number.
    uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(g_ConvergenceStep + g_FrameIndex) * uint(26699)) | uint(1);
    
    float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);

    float2 ndcCoords = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
    
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    // Get a ray in view space.
    float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);
    
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin = K_T_MIN;
    ray.TMax = K_T_MAX;

    PathPayload payload;
    payload.radiance = float3(1, 1, 1);
    payload.emission = float3(0, 0, 0);
    payload.rngState = rngState;
    payload.bounceIndexOpaque = 0;
    payload.bounceIndexTransparent = 0;
    payload.bounceRayOrigin = float3(0, 0, 0);
    payload.bounceRayDirection = float3(0, 0, 0);

    // Safe net for when shaders have compilation errors and don't increase the bounce index, resulting in an infinite loop.
    uint safeNet = 0;

    float3 radiance = float3(0, 0, 0);
    float3 throughput = float3(1, 1, 1);

    // View
    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, K_MISS_SHADER_PT_SCATTER_RAY_INDEX, ray, payload);
    radiance += payload.emission * throughput;
    throughput *= payload.radiance;
    
    ray.Origin = payload.bounceRayOrigin;
    ray.Direction = payload.bounceRayDirection;

    g_VPos[launchIndex] = float4(ray.Origin, 1);
    g_VNorm[launchIndex] = float4(payload.hitNorm, 1);
    g_VColor[launchIndex] = float4(payload.radiance, 1);

    // Sample
    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, K_MISS_SHADER_PT_SCATTER_RAY_INDEX, ray, payload);
    radiance += payload.emission * throughput;
    throughput *= payload.radiance;
    
    ray.Origin = payload.bounceRayOrigin;
    ray.Direction = payload.bounceRayDirection;

    do
    {
        TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, K_MISS_SHADER_PT_SCATTER_RAY_INDEX, ray, payload);

        float pathStopProbability = 1;

        #define ENABLE_RUSSIAN_ROULETTE 1

        #if ENABLE_RUSSIAN_ROULETTE
            pathStopProbability = max(throughput.r, max(throughput.g, throughput.b));

            // Dark colors have higher chance to terminate the path early.
            if (pathStopProbability < RandomFloat01(payload.rngState))
                break;
        #endif

        radiance += payload.emission * throughput;

        throughput *= payload.radiance;

        throughput *= 1 / pathStopProbability;

        ray.Origin = payload.bounceRayOrigin;
        ray.Direction = payload.bounceRayDirection;
    }
    while ((payload.bounceIndexOpaque <= g_BounceCountOpaque) && (payload.bounceIndexTransparent <= g_BounceCountTransparent) && (++safeNet < 1000));

    g_SPos[launchIndex] = float4(ray.Origin, 1);
    g_SNorm[launchIndex] = float4(payload.hitNorm, 1);
    g_SColor[launchIndex] = float4(radiance, 1);
    g_Random[launchIndex] = payload.pdf;

    
    float3 prevRadiance = g_Output[launchIndex].xyz;

    // float3 result = lerp(prevRadiance, radiance, 1 / float(g_ConvergenceStep + 1));
    // float3 result = payload.hitNorm;

    g_Output[launchIndex] = g_VColor[launchIndex];
}



[shader("miss")]
void MissShader0_Primary(inout PathPayload payload : SV_RayPayload)
{
    payload.hitNorm = float3(0, 0, 0);
    payload.hitPos = float3(0, 0, 0);
    // payload.radiance = float3(0, 0, 0);
    // payload.pdf = 0;
    
    payload.emission = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;
    payload.bounceIndexOpaque = -1;
}
